{"version":3,"sources":["data/Animals.js","data/Colors.js","data/Flags.js","components/StartComponent/StartComponent.js","components/CategoryComponent/CategoryComponent.js","components/EndComponent/EndComponent.js","components/Cards/MainCard.js","components/Cards/Card.js","components/Cards/Cards.js","components/App.js","index.js"],"names":["Animals","Colors","Flags","require","StartComponent","react_default","a","createElement","className","onClick","this","props","startGame","Modal","trigger","Button","Header","Content","image","Description","React","Component","CategoryComponent","getData","_callee","word","regenerator_default","wrap","_context","prev","next","_this","getWords","getImages","stop","_this2","style","fontSize","Object","asyncToGenerator","mark","_callee2","_context2","abrupt","sent","_callee3","_context3","_callee4","_context4","EndComponent","concat","score","attempts","playAgain","MainCard","id","correctWord","Card","getStyle","category","backgroundColor","source","width","minHeight","height","border","borderRadius","boxShadow","margin","maxHeight","categoryType","updateScore","alt","src","getCard","Cards","imagesArray","length","Cards_Card","wordsArray","components_Cards_MainCard","padding","color","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","gameOn","i","response","_response","_response2","state","axios","get","apiKEY","push","data","hits","webformatURL","_ref2","dataArray","correctIndex","_require","getCode","correctWordShortcut","randomNumber","randomWord","_require2","_getCode","shuffledArray","t0","getNames","console","log","Math","floor","random","splice","shuffle","categoryChoosed","_x","apply","arguments","_ref3","_require3","getName","_x2","_x3","totalAttempts","array","temporaryValue","randomIndex","currentIndex","components_EndComponent_EndComponent","components_Cards_Cards","start","components_CategoryComponent_CategoryComponent","setCategory","components_StartComponent_StartComponent","ReactDOM","render","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.5c0953d4.chunk.js","sourcesContent":["const Animals = [\r\n    \"Albatross\",\r\n    \"Alligator\",\r\n    \"Alpaca\",\r\n    \"Ant\",\r\n    \"Ape\",\r\n    \"Donkey\",\r\n    \"Baboon\",\r\n    \"Bear\",\r\n    \"Beaver\",\r\n    \"Bee\",\r\n    \"Bison\",\r\n    \"Boar\",\r\n    \"Buffalo\",\r\n    \"Butterfly\",\r\n    \"Camel\",\r\n    \"Cat\",\r\n    \"Cheetah\",\r\n    \"Chicken\",\r\n    \"Chimpanzee\",\r\n    \"Cobra\",\r\n    \"Cockroach\",\r\n    \"Cod\",\r\n    \"Cormorant\",\r\n    \"Coyote\",\r\n    \"Crab\",\r\n    \"Crane\",\r\n    \"Crocodile\",\r\n    \"Crow\",\r\n    \"Deer\",\r\n    \"Dinosaur\",\r\n    \"Dog\",\r\n    \"Dolphin\",\r\n    \"Duck\",\r\n    \"Dunlin\",\r\n    \"Elephant\",\r\n    \"Emu\",\r\n    \"Fish\",\r\n    \"Flamingo\",\r\n    \"Fly\",\r\n    \"Fox\",\r\n    \"Frog\",\r\n    \"Gazelle\",\r\n    \"Giraffe\",\r\n    \"Gnat\",\r\n    \"Gnu\",\r\n    \"Goat\",\r\n    \"Goldfish\",\r\n    \"Goose\",\r\n    \"Gorilla\",\r\n    \"Hamster\",\r\n    \"Hawk\",\r\n    \"Hedgehog\",\r\n    \"Hippopotamus\",\r\n    \"Hornet\",\r\n    \"Horse\",\r\n    \"Human\",\r\n    \"Hyena\",\r\n    \"Jackal\",\r\n    \"Jaguar\",\r\n    \"Jellyfish\",\r\n    \"Kangaroo\",\r\n    \"Koala\",\r\n    \"Lemur\",\r\n    \"Leopard\",\r\n    \"Lion\",\r\n    \"Llama\",\r\n    \"Lobster\",\r\n    \"Mongoose\",\r\n    \"Monkey\",\r\n    \"Mosquito\",\r\n    \"Mouse\",\r\n    \"Octopus\",\r\n    \"Ostrich\",\r\n    \"Owl\",\r\n    \"Oyster\",\r\n    \"Panther\",\r\n    \"Parrot\",\r\n    \"Penguin\",\r\n    \"Pig\",\r\n    \"Pigeon\",\r\n    \"Pony\",\r\n    \"Rabbit\",\r\n    \"Raccoon\",\r\n    \"Rat\",\r\n    \"Raven\",\r\n    \"Salmon\",\r\n    \"Sardine\",\r\n    \"Scorpion\",\r\n    \"Seahorse\",\r\n    \"Seal\",\r\n    \"Shark\",\r\n    \"Sheep\",\r\n    \"Shrew\",\r\n    \"Skunk\",\r\n    \"Snail\",\r\n    \"Snake\",\r\n    \"Squirrel\",\r\n    \"Swan\",\r\n    \"Tiger\",\r\n    \"Turkey\",\r\n    \"Turtle\",\r\n    \"Wasp\",\r\n    \"Whale\",\r\n    \"Wolf\",\r\n    \"Wombat\",\r\n    \"Worm\",\r\n    \"Zebra\"\r\n]\r\n\r\nexport default Animals;","const Colors = [\"AliceBlue\", \"AntiqueWhite\", \"Aqua\", \"Aquamarine\", \"Azure\", \"Beige\", \"Bisque\", \"Black\", \"BlanchedAlmond\", \"Blue\", \"BlueViolet\", \"Brown\", \"BurlyWood\", \"CadetBlue\", \"Chartreuse\", \"Chocolate\", \"Coral\", \"CornflowerBlue\", \"Cornsilk\", \"Crimson\", \"Cyan\", \"DarkBlue\", \"DarkCyan\", \"DarkGoldenRod\", \"DarkGray\", \"DarkGrey\", \"DarkGreen\", \"DarkKhaki\", \"DarkMagenta\", \"DarkOliveGreen\", \"DarkOrange\", \"DarkOrchid\", \"DarkRed\", \"DarkSalmon\", \"DarkSeaGreen\", \"DarkSlateBlue\", \"DarkSlateGray\", \"DarkSlateGrey\", \"DarkTurquoise\", \"DarkViolet\", \"DeepPink\", \"DeepSkyBlue\", \"DimGray\", \"DimGrey\", \"DodgerBlue\", \"FireBrick\", \"FloralWhite\", \"ForestGreen\", \"Fuchsia\", \"Gainsboro\", \"GhostWhite\", \"Gold\", \"GoldenRod\", \"Gray\", \"Grey\", \"Green\", \"GreenYellow\", \"HoneyDew\", \"HotPink\", \"IndianRed\", \"Indigo\", \"Ivory\", \"Khaki\", \"Lavender\", \"LavenderBlush\", \"LawnGreen\", \"LemonChiffon\", \"LightBlue\", \"LightCoral\", \"LightCyan\", \"LightGoldenRodYellow\", \"LightGray\", \"LightGrey\", \"LightGreen\", \"LightPink\", \"LightSalmon\", \"LightSeaGreen\", \"LightSkyBlue\", \"LightSlateGray\", \"LightSlateGrey\", \"LightSteelBlue\", \"LightYellow\", \"Lime\", \"LimeGreen\", \"Linen\", \"Magenta\", \"Maroon\", \"MediumAquaMarine\", \"MediumBlue\", \"MediumOrchid\", \"MediumPurple\", \"MediumSeaGreen\", \"MediumSlateBlue\", \"MediumSpringGreen\", \"MediumTurquoise\", \"MediumVioletRed\", \"MidnightBlue\", \"MintCream\", \"MistyRose\", \"Moccasin\", \"NavajoWhite\", \"Navy\", \"OldLace\", \"Olive\", \"OliveDrab\", \"Orange\", \"OrangeRed\", \"Orchid\", \"PaleGoldenRod\", \"PaleGreen\", \"PaleTurquoise\", \"PaleVioletRed\", \"PapayaWhip\", \"PeachPuff\", \"Peru\", \"Pink\", \"Plum\", \"PowderBlue\", \"Purple\", \"RebeccaPurple\", \"Red\", \"RosyBrown\", \"RoyalBlue\", \"SaddleBrown\", \"Salmon\", \"SandyBrown\", \"SeaGreen\", \"SeaShell\", \"Sienna\", \"Silver\", \"SkyBlue\", \"SlateBlue\", \"SlateGray\", \"SlateGrey\", \"Snow\", \"SpringGreen\", \"SteelBlue\", \"Tan\", \"Teal\", \"Thistle\", \"Tomato\", \"Turquoise\", \"Violet\", \"Wheat\", \"White\", \"WhiteSmoke\", \"Yellow\", \"YellowGreen\"];\r\n\r\nexport default Colors;","const Flags = require('country-list')\r\n\r\nexport default Flags;","import React from 'react';\r\nimport { Button, Modal } from 'semantic-ui-react'\r\n\r\nclass StartComponent extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className=\"ui vertical buttons\" >\r\n            <button onClick = {this.props.startGame} className=\"ui orange button massive\">\r\n                Start\r\n            </button>\r\n            <Modal trigger={<Button className=\"ui orange button massive\">How to play? </Button>}>\r\n                <Modal.Header>How to play?</Modal.Header>\r\n                <Modal.Content image>\r\n                <Modal.Description>\r\n                    <p>Click start. Choose category. Next you will see a word and four options. Try to choose the correct one. You have 10 attempts. </p>\r\n                    <p><b>GOOD LUCK!</b></p>\r\n                </Modal.Description>\r\n                </Modal.Content>\r\n            </Modal>  \r\n        </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default StartComponent;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nclass CategoryComponent extends React.Component {\r\n    getData = async (word) => {\r\n        await this.props.getWords(word)\r\n        await this.props.getImages()\r\n    }\r\n\r\n    render() {\r\n            return (<div className =\"ui grid\" >\r\n                <div className = \"sixteen wide column center aligned\"> \r\n                    <div className = 'ui centered orange inverted header' style = {{fontSize: \"2.75em\"}}>\r\n                        Choose category\r\n                    </div>\r\n                </div>\r\n                <div className = \"sixteen wide column center aligned\">\r\n                    <div className=\"ui vertical buttons\" >\r\n                            <button  className=\"ui orange button massive\" onClick = {async () =>await this.getData('Colors') }>\r\n                                Colors\r\n                            </button>\r\n                            <button className=\"ui orange button massive\" onClick = {async () => await this.getData('Animals') }>\r\n                                Animals\r\n                            </button>                   \r\n                            <button className=\"ui orange button massive\" onClick = {async () => await this.getData('Flags') }>\r\n                                Flags\r\n                            </button>                   \r\n                    </div>\r\n                </div>\r\n            </div>)\r\n    }\r\n}\r\nexport default CategoryComponent;","import React from 'react';\r\n\r\nclass EndComponent extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className =\"ui grid\" >\r\n            <div className = \"sixteen wide column center aligned\" >\r\n                <div className=\"ui centered\">\r\n                    <div className=\"ui huge statistic\">\r\n                        <div className=\"label\">\r\n                        Your Score\r\n                        </div>\r\n                        <div className=\"value\">\r\n                            {`${this.props.score}/${this.props.attempts}`}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className = \"sixteen wide column center aligned\">\r\n                <button  className=\"ui orange button massive\" onClick = {this.props.playAgain}>\r\n                    Play again\r\n                </button>\r\n            </div>\r\n        </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default EndComponent;","import React from 'react';\r\nimport './MainCard.css'\r\n\r\nclass MainCard extends React.Component {\r\n    render(){\r\n            return (\r\n            <div className =\"sixteen wide column\" id=\"mainCard\">\r\n                {this.props.correctWord}\r\n            </div>\r\n            )\r\n    };     \r\n}\r\n\r\nexport default MainCard;","import React from 'react';\r\n\r\nclass Card extends React.Component {\r\n    getStyle = (category) => {\r\n        switch (category) {\r\n                case 'Colors':\r\n                    return(\r\n                        {backgroundColor: this.props.source, width: \"120px\", minHeight:\"120px\" ,height: \"auto\", border: \"5px solid black\", borderRadius: \"5%\", boxShadow: \"10px 10px 5px 0px rgba(0, 0, 0, 0.75)\", margin: \"10px\" }\r\n                    )\r\n                case 'Animals':\r\n                    return(\r\n                        {height: \"auto\", margin: \"10px\", maxHeight: \"200px\"}\r\n                    )               \r\n                default:        \r\n                }\r\n    }\r\n\r\n    getCard(){\r\n        if (this.props.categoryType === 'Colors'){\r\n            return (\r\n                <div className =\"ui grid center aligned\">\r\n                    <div style = {this.getStyle(this.props.categoryType)} onClick={ () => this.props.updateScore(this.props.word, this.props.categoryType) } >\r\n                    </div>\r\n                </div>\r\n                )\r\n        } else {\r\n            return (\r\n                <div className =\"ui grid center aligned\"  onClick={ () => this.props.updateScore(this.props.word, this.props.categoryType) }>\r\n                    <img alt={this.props.word}  className = {this.props.categoryType === \"Flags\" ? \"ui small image\" : \"ui medium circular image\"} style = {this.getStyle(this.props.categoryType)} src={this.props.source} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (<div className =\"eight wide column\"> \r\n                {this.getCard()}\r\n                </div>\r\n        )\r\n    };     \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport MainCard from './MainCard'\r\nimport Card from './Card';\r\n\r\nclass Cards extends React.Component {\r\n    render(){\r\n        if(this.props.imagesArray.length === 4){\r\n            return (\r\n                <div>\r\n                    <div className= 'ui grid'>\r\n                        <Card  source={this.props.imagesArray[0]} categoryType={this.props.categoryType} updateScore = {this.props.updateScore} word = {this.props.wordsArray[0]}/>\r\n                        <Card  source={this.props.imagesArray[1]} categoryType={this.props.categoryType} updateScore = {this.props.updateScore} word = {this.props.wordsArray[1]} />\r\n                        <Card   source={this.props.imagesArray[2]} categoryType={this.props.categoryType} updateScore = {this.props.updateScore} word = {this.props.wordsArray[2]}/>\r\n                        <Card  source={this.props.imagesArray[3]} categoryType={this.props.categoryType} updateScore = {this.props.updateScore} word = {this.props.wordsArray[3]} />\r\n                    </div>\r\n                    <div className=\"ui grid\">\r\n                        <MainCard correctWord = {this.props.correctWord}/>\r\n                    </div>\r\n                    <div className=\"ui grid\">\r\n                        <div className=\"sixteen wide column center aligned\">\r\n                            <div className=\"ui statistic center\" style = {{border: \"5px solid white\", padding: \"10px\", backgroundColor: \"rgb(242, 113, 28)\", boxShadow: \"10px 10px 5px 0px rgba(0, 0, 0, 0.75)\"}}>\r\n                                <div className=\"value\" style={{color: \"white\"}}>\r\n                                    {this.props.score}\r\n                                </div>\r\n                                <div className=\"label\" style={{color: \"white\"}}>\r\n                                    Score\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n            } else {\r\n                return <div>Loading...</div>\r\n            }\r\n    };\r\n}\r\nexport default Cards;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './styles.css'\r\nimport Animals from '../data/Animals';\r\nimport Colors from '../data/Colors';\r\nimport Flags from '../data/Flags';\r\nimport StartComponent from './StartComponent/StartComponent';\r\nimport CategoryComponent from './CategoryComponent/CategoryComponent';\r\nimport EndComponent from './EndComponent/EndComponent';\r\nimport Cards from './Cards/Cards';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            gameOn: false,\r\n            categoryChoosed: false,\r\n            categoryType: null,\r\n            apiKEY: \"13065829-4a687870cfa2bcfed99bf7395\",\r\n            score: 0,\r\n            attempts: 0,\r\n            totalAttempts: 10,\r\n            imagesArray: []\r\n        }\r\n    }\r\n    startGame = () => this.setState({gameOn: true});\r\n\r\n    getImages = async () => {\r\n        let imagesArray = []\r\n        for (let i = 0; i < 4; i++) {\r\n            if (this.state.categoryType === \"Animals\") {                       \r\n                const response = await axios.get(`https://pixabay.com/api/?key=${this.state.apiKEY}&q=${this.state.wordsArray[i]}&image_type=photo&category=animals`)\r\n                imagesArray.push(response.data.hits[0].webformatURL)}\r\n            if (this.state.categoryType === \"Flags\") {\r\n                const response = `https://www.countryflags.io/${this.state.wordsArray[i]}/flat/64.png`\r\n                imagesArray.push(response)\r\n            }\r\n            if (this.state.categoryType === \"Colors\"){\r\n                const response = this.state.wordsArray[i];\r\n                imagesArray.push(response)\r\n            }\r\n        }\r\n        await this.setState({imagesArray: imagesArray })\r\n    }\r\n    shuffle(array) {\r\n        let currentIndex = array.length,\r\n            temporaryValue, randomIndex;\r\n        while (0 !== currentIndex) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array;\r\n        }\r\n    getWords = async (category) => {\r\n        //SETTING A ARRAY WITH PROPER DATA\r\n        let dataArray = [];\r\n        switch (category) {\r\n            case 'Animals':\r\n                dataArray = Animals;\r\n                break;\r\n            case 'Colors':\r\n                dataArray = Colors;\r\n                break;\r\n            case 'Flags':\r\n                dataArray = Flags.getNames();\r\n                break;\r\n            default:\r\n                console.log('ERROR NO CATEGORY');\r\n        }\r\n        //GETTING CORRECT WORD\r\n        let wordsArray = []\r\n        let correctIndex = Math.floor(Math.random() * dataArray.length);\r\n        let correctWord = dataArray[correctIndex];\r\n        if (category === 'Flags') {\r\n            const { getCode } = require('country-list');\r\n                const correctWordShortcut = getCode(correctWord);\r\n                wordsArray.push(correctWordShortcut);\r\n            } else {\r\n                wordsArray.push(correctWord)\r\n            }\r\n        dataArray.splice(correctIndex, 1)\r\n        //GETTING RANDOM WORDS\r\n        for (let i = 0; i < 3; i++) {\r\n            let randomNumber = Math.floor(Math.random() * dataArray.length)\r\n            let randomWord = dataArray[randomNumber];\r\n            if (category === 'Flags') {\r\n                const { getCode } = require('country-list');\r\n                randomWord = getCode(randomWord)\r\n            }\r\n            dataArray.splice(randomNumber, 1);\r\n            wordsArray.push(randomWord);\r\n        }\r\n        //CHANGING POSITIONS OF ELEMENTS IN ARRAY AND SETING STATE\r\n        let shuffledArray = this.shuffle(wordsArray)\r\n        this.setState({\r\n                categoryChoosed: true,\r\n                categoryType: category,\r\n                correctWord: correctWord,\r\n                wordsArray: shuffledArray\r\n            })               \r\n    };\r\n\r\n    updateScore = async (word, category) => {\r\n        if (category === \"Flags\"){\r\n            const { getName } = require('country-list');\r\n            word = await getName(word);\r\n        }\r\n        if(word === this.state.correctWord){\r\n            this.setState({\r\n                score: this.state.score+1,\r\n                attempts: this.state.attempts+1\r\n            })\r\n        } else {\r\n            this.setState({\r\n                score: this.state.score,\r\n                attempts: this.state.attempts + 1\r\n            })\r\n        }\r\n        await this.getWords(category)\r\n        await this.getImages(); \r\n    }\r\n    playAgain = () => {\r\n        this.setState({\r\n            gameOn: true,\r\n            categoryChoosed: false,\r\n            categoryType: null,\r\n            apiKEY: \"13065829-4a687870cfa2bcfed99bf7395\",\r\n            score: 0,\r\n            attempts: 0,\r\n            imagesArray: []\r\n        })\r\n    };\r\n    \r\n    render() {\r\n        if (this.state.attempts === this.state.totalAttempts){\r\n            return <EndComponent \r\n                score = {this.state.score}\r\n                attempts = {this.state.attempts}\r\n                playAgain = {this.playAgain}\r\n            />\r\n        }\r\n        if (this.state.gameOn && this.state.categoryChoosed && this.state.categoryType)\r\n            {return (\r\n            <div className='game'>\r\n                <Cards \r\n                    start={this.state.gameOn} \r\n                    category={this.state.categoryChoosed} \r\n                    categoryType={this.state.categoryType} \r\n                    getImages = {this.getImages} \r\n                    correctWord = {this.state.correctWord} \r\n                    getWords={this.getWords} \r\n                    score={this.state.score} \r\n                    updateScore = {this.updateScore}\r\n                    imagesArray = {this.state.imagesArray}\r\n                    wordsArray = {this.state.wordsArray}\r\n                />\r\n            </div>)}\r\n        if (this.state.gameOn){\r\n            return (\r\n            <div className='game'>\r\n                <CategoryComponent \r\n                    start={this.state.gameOn} \r\n                    category={this.state.categoryChoosed}  \r\n                    setCategory={this.setCategory} \r\n                    getWords={this.getWords}\r\n                    getImages = {this.getImages} \r\n                />\r\n            </div>)}\r\n            else {\r\n            return (\r\n                <div className='game'>\r\n                    <StartComponent \r\n                        startGame = {this.startGame}  \r\n                    />\r\n                </div>)}\r\n        }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles.css'\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />,\r\n    document.querySelector('#root')\r\n    )"],"sourceRoot":""}